from dotenv import find_dotenv, load_dotenv # –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
import os # –±–∏–±–ª–∏–æ–µ—Ç–∫–∞ –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
from aiohttp import ClientSession # –¥–ª—è get-–∑–∞–ø—Ä–æ—Å–æ–≤ –∫ —Ä–µ—Å—É—Ä—Å—É —Å –ø–æ–≥–æ–¥–æ–π
from service_functions.custom_error import Error # –∫–∞—Å—Ç–æ–º—ã–π –∫–ª–∞—Å—Å –æ—à–∏–±–∫–∏
from telebot.types import Message # –∏–º–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–µ–ª–µ–≥—Ä–∞–º

# -------------------------------------------–°–õ–£–ñ–ï–ë–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï------------------------------------------
load_dotenv(find_dotenv()) # –æ–±–Ω–æ–≤–ª—è–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
API: str = os.getenv(key='weather_api') # —Å–æ—Ö—Ä–∞–Ω—è–µ–º api_–∫–ª—é—á —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
# ---------------------------------------------------------------------------------------------------------



# ---------------------------------------API –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–º—É –≥–æ—Ä–æ–¥—É--------------------------
async def get_coords(city: str) -> dict:
    load_dotenv(dotenv_path=find_dotenv())  # –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    URL: str = f'http://api.openweathermap.org/geo/1.0/direct?q={city}&appid={API}' #—Å—Å—ã–ª–∫–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    async with ClientSession() as Session:
        async with Session.get(url=URL) as responce:
            request_to_get_coords = await responce.json()
    if len(request_to_get_coords) == 0: ## –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∏—á–µ–º –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω - –∑–Ω–∞—á–∏—Ç –º—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –≥–æ—Ä–æ–¥
        raise Error(error_text='–ì–æ—Ä–æ–¥ –≤–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ')
    else:
        lat: int = request_to_get_coords[0]['lat']  # —à–∏—Ä–æ—Ç–∞
        lon: int = request_to_get_coords[0]['lon']  # –¥–æ–ª–≥–æ—Ç–∞

        return_variable: dict = {'latitude': lat, 'longitude': lon, 'city': city}
        return return_variable
# -------------------------------------------------------------------------------------------------------------


# -------------------------------------------------API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã------------------------------------
async def get_weather(coords: dict[str, int], units: str = 'metric', time: str = 'now') -> dict | None: # units = –µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã. metric = —Ü–µ–ª—å—Å–∏–∏, imperial = —Ñ–∞—Ä–µ–Ω–≥–µ–∏—Ç, standard = –∫–∞–ª–≤–∏–Ω—ã
    return_variable: dict # –∑–Ω–∞—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—è

    if time == 'now': #–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏
        URL: str = f'https://api.openweathermap.org/data/2.5/weather?lat={coords.get('latitude')}&lon={coords.get('longitude')}&appid={API}&units={units}'
        async with ClientSession() as Session:
            async with Session.get(url=URL) as responce:
                request_to_get_weather = await responce.json()
        responce_from_request = {'temp': int(request_to_get_weather['main']['temp']), # —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ —Ü–µ–ª—å—Å–∏—è—Ö
                           'feels_like': int(request_to_get_weather['main']['feels_like']), # –Ω–∞—Å–∫–æ–ª—å–∫–æ –æ—â—É—â–∞–µ—Ç—Å—è –ø–æ–≥–æ–¥–∞
                           'windy_speed': int(request_to_get_weather['wind']['speed']), # —Å–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ –∫–º/—á
                           'weather': request_to_get_weather['weather'][0]['main'], # –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã
                           "name of place": request_to_get_weather['name'] # –≥–æ—Ä–æ–¥
                           }
        return fill_weather_dict(responce_from_request)
    else:
        return None
# ------------------------------------------------------------------------------------------------------------


# -----------------------------------------------–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã –ø–æ –≥–æ—Ä–æ–¥—É----------------------------
async def get_weather_in_city_api(message: Message) -> dict:
    city: str = message.text # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
    weather_dict = dict() # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–∞—è —Ö–µ—à —Ç–∞–±–ª–∏—Ü–∞
    try:
        weather: dict = await get_weather(await get_coords(city), time='now', units='metric') # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –µ—Å–ª–∏ –º—ã –≤–≤–µ–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ–≤–µ—Ä–Ω–æ.
    except Error as er:
        return None # –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã
    return weather
# ------------------------------------------------------------------------------------------------------------------------------


def fill_weather_dict(weather_responce_from_http: dict) -> dict:
    weather: dict = dict() # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏
    # -------------–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∏ –∫–∞–∫ –æ—â—É—â–∞–µ—Ç—Å—è---------
    if weather_responce_from_http['feels_like'] < 13:  # –µ—Å–ª–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –º–µ–Ω—å—à–µ 13 –ø–æ —Ü–µ–ª—å—Å–∏—é
        weather['temp'] = str(weather_responce_from_http['feels_like']) + '¬∞C ü•∂'
        weather['feels_like'] = str(weather_responce_from_http['feels_like']) + ' ¬∞C ü•∂'
    elif 13 <= weather_responce_from_http['feels_like'] <= 22:  # –µ—Å–ª–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –º–µ–∂–¥—É 13 –∏ 22 –ø–æ —Ü–µ–ª—å—Å–∏—é
        weather['temp'] = str(weather_responce_from_http['feels_like']) + '¬∞C ü§ó'
        weather['feels_like'] = str(weather_responce_from_http['feels_like']) + ' ¬∞C ü§ó'
    else:  # –µ—Å–ª–∏ –∂–∞—Ä–∫–æ
        weather['temp'] = str(weather_responce_from_http['feels_like']) + 'üî•'
        weather['feels_like'] = str(weather_responce_from_http['feels_like']) + ' ¬∞C üî•'
    # ------------------------------------------------------------

    # ------------------------–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞----------------------
    if weather_responce_from_http['windy_speed'] < 10:
        weather['windy_speed'] = str(weather_responce_from_http['feels_like']) + ' –∫–º/—á üê¢'
    else:
        weather['windy_speed'] = str(weather_responce_from_http['feels_like']) + ' –∫–º/—á üí®'
    # -----------------------------------------------------------

    # --------------–ü–æ–≥–æ–¥–∞ (—Å–æ–ª–Ω–µ—á–Ω–æ, –≤–µ—Ç—Ä–µ–Ω–Ω–æ –∏.—Ç.–ø)-------------
    if weather_responce_from_http['weather'] == 'Rain':
        weather['weather'] = '–î–æ–∂–¥—å üåß'
    elif weather_responce_from_http['weather'] == 'Snow':
        weather['weather'] = '–ò–¥—ë—Ç —Å–Ω–µ–≥ ‚ùÑÔ∏è'
    elif weather_responce_from_http['weather'] == 'Clouds':
        weather['weather'] = '–û–±–ª–∞—á–Ω–æ ‚òÅÔ∏è'
    elif weather_responce_from_http['weather'] == 'Clear':
        weather['weather'] = '–Ø—Å–Ω–æ ‚òÅÔ∏è‚ùå'
    else:
        weather['weather_str'] = weather['weather']
    # --------------------------------------------------------

    if weather_responce_from_http.get("name of place") is not None: # –µ—Å–ª–∏ –≤ http-–æ—Ç–≤–µ—Ç–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Å—Ç–µ –ø–æ–≥–æ–¥—ã
        weather['name of place'] = weather_responce_from_http['name of place']
    return weather




